1. Predict how the values and object ids will change throughout the flow of the code below:
def fun_with_ids
  a_outer = 42 # a_outer_object_id
  b_outer = "forty two" # b_outer_object_id
  c_outer = [42] # c_outer_object_id
  d_outer = c_outer[0] # d_outer_object_id

  a_outer_id = a_outer.object_id 
  b_outer_id = b_outer.object_id
  c_outer_id = c_outer.object_id
  d_outer_id = d_outer.object_id

  puts "a_outer is #{a_outer} with an id of: #{a_outer_id} before the block."
  # a_outer is 42 with an id of: 1 before the block.
  puts "b_outer is #{b_outer} with an id of: #{b_outer_id} before the block."
  # b_outer is forty two with an id of: 2 before the block.
  puts "c_outer is #{c_outer} with an id of: #{c_outer_id} before the block."
  # c_outer is 42 with an id of: 3 before the block.
  puts "d_outer is #{d_outer} with an id of: #{d_outer_id} before the block."
  # d_outer is 42 with an id of: 4 before the block.
  # CORRECTION: d_outer is 42 with an id of: 1 before the block.
  # Since a_outer and d_outer are the same value, Ruby knows to reference a_outer's object id. 
  puts

  1.times do
    a_outer_inner_id = a_outer.object_id
    b_outer_inner_id = b_outer.object_id
    c_outer_inner_id = c_outer.object_id
    d_outer_inner_id = d_outer.object_id

    puts "a_outer id was #{a_outer_id} before the block and is: #{a_outer_inner_id} inside the block."
    # a_outer id was 1 before the block and is: 1 inside the block. 
    puts "b_outer id was #{b_outer_id} before the block and is: #{b_outer_inner_id} inside the block."
    # b_outer id was 2 before the block and is: 2 inside the block. 
    puts "c_outer id was #{c_outer_id} before the block and is: #{c_outer_inner_id} inside the block."
    # c_outer id was 3 before the block and is: 3 inside the block. 
    puts "d_outer id was #{d_outer_id} before the block and is: #{d_outer_inner_id} inside the block."
    # d_outer id was 1 before the block and is: 1 inside the block. 
    puts

    a_outer = 22 # new object id
    b_outer = "thirty three" # new object id
    c_outer = [44] # new object id
    d_outer = c_outer[0] # new object id

    puts "a_outer inside after reassignment is #{a_outer} with an id of: #{a_outer_id} before and: #{a_outer.object_id} after."
    # a_outer inside after reassignment is 22 with an id of: 1 before and: 10 after. 
    puts "b_outer inside after reassignment is #{b_outer} with an id of: #{b_outer_id} before and: #{b_outer.object_id} after."
    # b_outer inside after reassignment is thirty three with an id of: 2 before and: 20 after. 
    puts "c_outer inside after reassignment is #{c_outer} with an id of: #{c_outer_id} before and: #{c_outer.object_id} after."
    # c_outer inside after reassignment is 44 with an id of: 3 before and: 30 after. 
    puts "d_outer inside after reassignment is #{d_outer} with an id of: #{d_outer_id} before and: #{d_outer.object_id} after."
    # d_outer inside after reassignment is 44 with an id of: 1 before and: 40 after. 
    puts


    a_inner = a_outer # generates new object ids
    b_inner = b_outer # generates new object ids
    c_inner = c_outer # generates new object ids
    d_inner = c_inner[0] # generates new object ids

    a_inner_id = a_inner.object_id
    b_inner_id = b_inner.object_id
    c_inner_id = c_inner.object_id
    d_inner_id = d_inner.object_id

    puts "a_inner is #{a_inner} with an id of: #{a_inner_id} inside the block (compared to #{a_outer.object_id} for outer)."
    # a_inner is 22 with an id of: 100 inside the block (compared to 10 for outer).
    # CORRECTION: a_inner is 22 with an id of: 10 inside the block (compared to 10 for outer).
    puts "b_inner is #{b_inner} with an id of: #{b_inner_id} inside the block (compared to #{b_outer.object_id} for outer)."
    # b_inner is thirty three with an id of: 200 inside the block (compared to 20 for outer).
    # CORRECTION: b_inner is thirty three with an id of: 20 inside the block (compared to 20 for outer).
    puts "c_inner is #{c_inner} with an id of: #{c_inner_id} inside the block (compared to #{c_outer.object_id} for outer)."
    # c_inner is 44 with an id of: 300 inside the block (compared to 30 for outer).
    # CORRECTION: c_inner is 44 with an id of: 30 inside the block (compared to 30 for outer).
    puts "d_inner is #{d_inner} with an id of: #{d_inner_id} inside the block (compared to #{d_outer.object_id} for outer)."
    # d_inner is 44 with an id of: 400 inside the block (compared to 40 for outer).
    # CORRECTION: d_inner is 44 with an id of: 40 inside the block (compared to 40 for outer).
    puts
    # CORRECTION: Ruby will reuse the same object (aka, if the values are the same), if possible. 
  end

  puts "a_outer is #{a_outer} with an id of: #{a_outer_id} BEFORE and: #{a_outer.object_id} AFTER the block."
  # a_outer is 22 with an id of: 1 BEFORE and: 1 AFTER the block.
  # CORRECTION: a_outer is 42 with an id of: 1 BEFORE and: 10 AFTER the block.
  puts "b_outer is #{b_outer} with an id of: #{b_outer_id} BEFORE and: #{b_outer.object_id} AFTER the block."
  # b_outer is thirty three with an id of: 2 BEFORE and: 2 AFTER the block.
  # CORRECTION: b_outer is forty two with an id of: 2 BEFORE and: 20 AFTER the block.
  puts "c_outer is #{c_outer} with an id of: #{c_outer_id} BEFORE and: #{c_outer.object_id} AFTER the block."
  # c_outer is 42 with an id of: 3 BEFORE and: 3 AFTER the block.
  # CORRECTION: c_outer is 44 with an id of: 3 BEFORE and: 30 AFTER the block.
  puts "d_outer is #{d_outer} with an id of: #{d_outer_id} BEFORE and: #{d_outer.object_id} AFTER the block."
  # d_outer is 42 with an id of: 1 BEFORE and: 1 AFTER the block.
  # CORRECTION: d_outer is 44 with an id of: 1 BEFORE and: 40 AFTER the block.
  puts
  # CORRECTION: Since the inner block was able to access the outer block's scope, 
  # each variable was updated to the new values that were defined in the inner block, and each object will 
  # keep the new object_ids. 

  puts "a_inner is #{a_inner} with an id of: #{a_inner_id} INSIDE and: #{a_inner.object_id} AFTER the block." rescue puts "ugh ohhhhh" 
  # ugh ohhhhh will be printed out. Can't access inner scope
  puts "b_inner is #{b_inner} with an id of: #{b_inner_id} INSIDE and: #{b_inner.object_id} AFTER the block." rescue puts "ugh ohhhhh" 
  # ugh ohhhhh will be printed out. Can't access inner scope
  puts "c_inner is #{c_inner} with an id of: #{c_inner_id} INSIDE and: #{c_inner.object_id} AFTER the block." rescue puts "ugh ohhhhh" 
  # ugh ohhhhh will be printed out. Can't access inner scope
  puts "d_inner is #{d_inner} with an id of: #{d_inner_id} INSIDE and: #{d_inner.object_id} AFTER the block." rescue puts "ugh ohhhhh" 
  # ugh ohhhhh will be printed out. Can't access inner scope
end

2. Let's look at object id's again from the perspective of a method call instead of a block.

Here we haven't changed ANY of the code outside or inside of the block/method. We simply took the contents of the block from the previous practice problem and moved it to a method, to which we are passing all of our outer variables.

Predict how the values and object ids will change throughout the flow of the code below:
def fun_with_ids
  a_outer = 42
  b_outer = "forty two"
  c_outer = [42]
  d_outer = c_outer[0]

  a_outer_id = a_outer.object_id
  b_outer_id = b_outer.object_id
  c_outer_id = c_outer.object_id
  d_outer_id = d_outer.object_id

  puts "a_outer is #{a_outer} with an id of: #{a_outer_id} before the block."
  # a_outer is 42 with an id of: 1 before the block.
  puts "b_outer is #{b_outer} with an id of: #{b_outer_id} before the block."
  # b_outer is forty two with an id of: 2 before the block.
  puts "c_outer is #{c_outer} with an id of: #{c_outer_id} before the block."
  # c_outer is 42 with an id of: 3 before the block.
  puts "d_outer is #{d_outer} with an id of: #{d_outer_id} before the block."
  # d_outer is 42 with an id of: 1 before the block.
  puts

  an_illustrative_method(a_outer, b_outer, c_outer, d_outer, a_outer_id, b_outer_id, c_outer_id, d_outer_id)


  puts "a_outer is #{a_outer} with an id of: #{a_outer_id} BEFORE and: #{a_outer.object_id} AFTER the method call."
  # a_outer is 42 with an id of: 1 BEFORE and: 1 AFTER the method call.
  puts "b_outer is #{b_outer} with an id of: #{b_outer_id} BEFORE and: #{b_outer.object_id} AFTER the method call."
  # b_outer is forty two with an id of: 2 BEFORE and: 2 AFTER the method call.
  puts "c_outer is #{c_outer} with an id of: #{c_outer_id} BEFORE and: #{c_outer.object_id} AFTER the method call."
  # c_outer is 42 with an id of: 3 BEFORE and: 3 AFTER the method call.
  puts "d_outer is #{d_outer} with an id of: #{d_outer_id} BEFORE and: #{d_outer.object_id} AFTER the method call."
  # d_outer is 42 with an id of: 1 BEFORE and: 1 AFTER the method call.
  puts

  puts "a_inner is #{a_inner} with an id of: #{a_inner_id} INSIDE and: #{a_inner.object_id} AFTER the method." rescue puts "ugh ohhhhh"
  puts "b_inner is #{b_inner} with an id of: #{b_inner_id} INSIDE and: #{b_inner.object_id} AFTER the method." rescue puts "ugh ohhhhh"
  puts "c_inner is #{c_inner} with an id of: #{c_inner_id} INSIDE and: #{c_inner.object_id} AFTER the method." rescue puts "ugh ohhhhh"
  puts "d_inner is #{d_inner} with an id of: #{d_inner_id} INSIDE and: #{d_inner.object_id} AFTER the method." rescue puts "ugh ohhhhh"
  # "ugh ohhhhh" for all put statements. 
  puts
end


def an_illustrative_method(a_outer, b_outer, c_outer, d_outer, a_outer_id, b_outer_id, c_outer_id, d_outer_id)

  puts "a_outer id was #{a_outer_id} before the method and is: #{a_outer.object_id} inside the method."
  # a_outer id was 1 before the method and is: 1 inside the method.
  puts "b_outer id was #{b_outer_id} before the method and is: #{b_outer.object_id} inside the method."
  # b_outer id was 2 before the method and is: 2 inside the method.
  puts "c_outer id was #{c_outer_id} before the method and is: #{c_outer.object_id} inside the method."
  # c_outer id was 3 before the method and is: 3 inside the method.
  puts "d_outer id was #{d_outer_id} before the method and is: #{d_outer.object_id} inside the method."
  # d_outer id was 1 before the method and is: 1 inside the method.
  puts

  a_outer = 22
  b_outer = "thirty three"
  c_outer = [44]
  d_outer = c_outer[0]

  puts "a_outer inside after reassignment is #{a_outer} with an id of: #{a_outer_id} before and: #{a_outer.object_id} after."
  # a_outer inside after reassignment is 22 with an id of: 1 before and: 10 after.
  puts "b_outer inside after reassignment is #{b_outer} with an id of: #{b_outer_id} before and: #{b_outer.object_id} after."
  # b_outer inside after reassignment is thirty three with an id of: 2 before and: 20 after.
  puts "c_outer inside after reassignment is #{c_outer} with an id of: #{c_outer_id} before and: #{c_outer.object_id} after."
  # c_outer inside after reassignment is 44 with an id of: 3 before and: 30 after.
  puts "d_outer inside after reassignment is #{d_outer} with an id of: #{d_outer_id} before and: #{d_outer.object_id} after."
  # d_outer inside after reassignment is 44 with an id of: 1 before and: 40 after.
  puts

  a_inner = a_outer
  b_inner = b_outer
  c_inner = c_outer
  d_inner = c_inner[0]

  a_inner_id = a_inner.object_id
  b_inner_id = b_inner.object_id
  c_inner_id = c_inner.object_id
  d_inner_id = d_inner.object_id

  puts "a_inner is #{a_inner} with an id of: #{a_inner_id} inside the method (compared to #{a_outer.object_id} for outer)."
  # a_inner is 22 with an id of: 10 inside the method (compared to 10 for outer).
  puts "b_inner is #{b_inner} with an id of: #{b_inner_id} inside the method (compared to #{b_outer.object_id} for outer)."
  # b_inner is thirty three with an id of: 20 inside the method (compared to 20 for outer).
  puts "c_inner is #{c_inner} with an id of: #{c_inner_id} inside the method (compared to #{c_outer.object_id} for outer)."
  # c_inner is 44 with an id of: 30 inside the method (compared to 30 for outer).
  puts "d_inner is #{d_inner} with an id of: #{d_inner_id} inside the method (compared to #{d_outer.object_id} for outer)."
  # d_inner is 44 with an id of: 40 inside the method (compared to 40 for outer).
  puts
end

3. Let's call a method, and pass both a string and an array as arguments
and see how even though they are treated in the same way by Ruby, the results can be different.

Study the following code and state what will be displayed...and why:
def tricky_method(a_string_param, an_array_param)
  a_string_param += "rutabaga"
  an_array_param << "rutabaga"
end

my_string = "pumpkins"
my_array = ["pumpkins"]
tricky_method(my_string, my_array)

puts "My string looks like this now: #{my_string}"
# My string looks like this now: pumpkins
puts "My array looks like this now: #{my_array}"
"My array looks like thisn now: ["pumpkins", "rutabaga"]"

4. To drive that last one home...let's turn the tables and have the string show a modified output, 
while the array thwarts the method's efforts to modify the caller's version of it.

def tricky_method_two(a_string_param, an_array_param)
  a_string_param << 'rutabaga'
  an_array_param = ['pumpkins', 'rutabaga']
end

my_string = "pumpkins"
my_array = ["pumpkins"]
tricky_method_two(my_string, my_array)

puts "My string looks like this now: #{my_string}"
# My string looks like this now: pumpkinsrutabaga
puts "My array looks like this now: #{my_array}"
# My array looks like this now: ["pumpkins"]

5. Depending on a method to modify its arguments can be tricky:
def tricky_method(a_string_param, an_array_param)
  a_string_param += "rutabaga"
  an_array_param << "rutabaga"
end

my_string = "pumpkins"
my_array = ["pumpkins"]
tricky_method(my_string, my_array)

puts "My string looks like this now: #{my_string}"
puts "My array looks like this now: #{my_array}"

Whether the above "coincidentally" does what we think we wanted "depends" upon what is going on inside the method.

How can we refactor this practice problem to make the result easier to predict and easier for the next programmer to maintain?


my_string = "pumpkins"
my_array = ["pumpkins"]

def tricky_method(a_string_param, an_array_param)
  a_string_param += "rutabaga"
  an_array_param += ["rutabaga"]

  return a_string_param, an_array_param
end

my_string, my_array = tricky_method(my_string, my_array)

6. How could the unnecessary duplication in this method be removed?
def color_valid(color)
  if color == "blue" || color == "green"
    true
  else
    false
  end
end

def color_valid(color)
  color == "blue" || color == "green"
end